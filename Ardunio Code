#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
#include <base64.h>
#include <Servo.h>
#include <ThingSpeak.h> // Include ThingSpeak library

// Your WiFi credentials
const char* ssid = "iQOO Z7 PRO";        // Replace with your WiFi SSID
const char* password = "11111111"; // Replace with your WiFi Password

// OpenWeatherMap API details
const char* weatherServer = "http://api.openweathermap.org/data/2.5/weather?q=Ballari&appid=c0b3ae62a144cce1cae4eae3ca0e5f7a";

const char* account_sid = "  ";
const char* auth_token = "b0fac5ca6175f07cbc5d45efb314a9ac";
const char* to_number = "+918197204255";
const char* from_number = "+12512378717";
const char* twilio_sms_url = "https://api.twilio.com/2010-04-01/Accounts/< twilio account sid>/Messages.json";
const char* twilio_call_url = "https://api.twilio.com/2010-04-01/Accounts/< twilio account sid>/Calls.json";

// ThingSpeak API details
unsigned long myChannelNumber = 2615369;  // Replace with your ThingSpeak channel number
const char* myWriteAPIKey = "BWPGWDC4OPR4GE8H"; // Replace with your ThingSpeak Write API Key

// Pins
const int trigPin1 = D1;  // GPIO 5
const int echoPin1 = D2;  // GPIO 4
const int trigPin2 = D5;  // GPIO 14
const int echoPin2 = D6;  // GPIO 12
const int servoPin1 = D4; // GPIO 2
const int servoPin2 = D7; // GPIO 13
const int buzzerPin = D3; // GPIO 0

// Parameters
const float threshold = 18.0;  // Distance threshold in cm
const int openPosition = 180;  // Servo position to open the gate
const int closePosition = 0;   // Servo position to close the gate

Servo myServo1;  // Create a Servo object for the first servo
Servo myServo2;  // Create a Servo object for the second servo
long duration1, duration2;
float distance1, distance2;
float lastDistance = 0;  // To store the last distance measurement

bool gateOpened = false;  // To track the gate status
bool heavyRain = false;   // To track the heavy rain status

WiFiClient client; // Create a WiFi client

void setup() {
  Serial.begin(115200);

  pinMode(trigPin1, OUTPUT);
  pinMode(echoPin1, INPUT);
  pinMode(trigPin2, OUTPUT);
  pinMode(echoPin2, INPUT);
  pinMode(buzzerPin, OUTPUT); // Initialize buzzer pin as output

  myServo1.attach(servoPin1);  // Attach the first servo to the specified pin
  myServo1.write(closePosition);  // Initialize first servo to close position
  
  myServo2.attach(servoPin2);  // Attach the second servo to the specified pin
  myServo2.write(closePosition);  // Initialize second servo to close position

  digitalWrite(buzzerPin, LOW); // Ensure the buzzer is off

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi connected");

  // Initialize ThingSpeak
  ThingSpeak.begin(client);

  // Initial distance measurement and weather data fetch
  measureDistanceAndHandle();
}

void loop() {
  // Check distance and update servo position
  measureDistanceAndHandle();
  delay(6000);  // Wait for 6 seconds before the next measurement
}

void measureDistanceAndHandle() {
  // Measure distance from sensor 1
  digitalWrite(trigPin1, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin1, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin1, LOW);
  duration1 = pulseIn(echoPin1, HIGH);
  distance1 = (duration1 * 0.034 / 2);  // Convert to cm

  // Measure distance from sensor 2
  digitalWrite(trigPin2, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin2, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin2, LOW);
  duration2 = pulseIn(echoPin2, HIGH);
  distance2 = (duration2 * 0.034 / 2);  // Convert to cm

  // Calculate average distance
  float averageDistance = (distance1 + distance2) / 2;

  // Log distance
  Serial.print("Distance 1: ");
  Serial.print(distance1);
  Serial.println(" cm");
  Serial.print("Distance 2: ");
  Serial.print(distance2);
  Serial.println(" cm");
  Serial.print("Average Distance: ");
  Serial.print(averageDistance);
  Serial.println(" cm");

  // Fetch weather data
  fetchWeatherData(averageDistance);

  // Upload data to ThingSpeak
  uploadToThingSpeak(averageDistance, distance1, distance2, gateOpened, heavyRain);
}

void fetchWeatherData(float averageDistance) {
  // Simulate weather data for heavy rain
  heavyRain = true;  // Simulate heavy rain condition
  Serial.println("Heavy rain detected (simulated).");

  bool smsSent = false;
  if (heavyRain) {
    sendTwilioMessage("Heavy rain detected. Critical water level: " + String(averageDistance) + " cm.");
    smsSent = true;
  }
  if (averageDistance < threshold) {
    sendTwilioMessage("Critical water level detected: " + String(averageDistance) + " cm.");
    smsSent = true;
  }
  if (heavyRain && averageDistance < threshold) {
    if (!gateOpened) {
      openGate();
      gateOpened = true;  // Update the gate status
      digitalWrite(buzzerPin, HIGH); // Turn the buzzer on
    }
    makeTwilioCall("Heavy rain detected and critical water level: " + String(averageDistance) + " cm.");
  } else {
    if (gateOpened) {
      closeGate();
      gateOpened = false;  // Update the gate status
      digitalWrite(buzzerPin, LOW); // Turn the buzzer off
    }
  }
}

void openGate() {
  for (int pos = closePosition; pos <= openPosition; pos++) {
    myServo1.write(pos);  // Move the first servo to position in variable 'pos'
    myServo2.write(pos);  // Move the second servo to position in variable 'pos'
    delay(15);           // Wait for 15 milliseconds to make the movement smooth
  }
  Serial.println("Gate Opened");
}

void closeGate() {
  for (int pos = openPosition; pos >= closePosition; pos--) {
    myServo1.write(pos);  // Move the first servo to position in variable 'pos'
    myServo2.write(pos);  // Move the second servo to position in variable 'pos'
    delay(15);           // Wait for 15 milliseconds to make the movement smooth
  }
  Serial.println("Gate Closed");
}

void sendTwilioMessage(String message) {
  WiFiClientSecure client;
  client.setInsecure();  // Use this for testing purposes only. In production, you should validate the server certificate.
  HTTPClient http;
  String auth = String(account_sid) + ":" + String(auth_token);
  
  // Encode authentication string
  String auth_base64 = base64::encode(auth);
  auth_base64.replace("\n", "");  // Remove new line characters
  
  http.begin(client, twilio_sms_url);
  http.addHeader("Authorization", "Basic " + auth_base64);
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");

  String postData = "Body=" + message + "&To=" + String(to_number) + "&From=" + String(from_number);
  
  int httpCode = http.POST(postData);
  
  if (httpCode > 0) {
    String payload = http.getString();
    Serial.println("SMS Response: " + payload);
  } else {
    Serial.println("Error on SMS HTTP request: " + String(httpCode));
  }

  http.end();
}

void makeTwilioCall(String message) {
  WiFiClientSecure client;
  client.setInsecure();  // Use this for testing purposes only. In production, you should validate the server certificate.
  HTTPClient http;
  String auth = String(account_sid) + ":" + String(auth_token);
  
  // Encode authentication string
  String auth_base64 = base64::encode(auth);
  auth_base64.replace("\n", "");  // Remove new line characters
  
  http.begin(client, twilio_call_url);
  http.addHeader("Authorization", "Basic " + auth_base64);
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");

  String urlEncodedMessage = "https://handler.twilio.com/twiml/EHfef5f4f90d9b435e91f8301f90b972ce";
  String postData = "Url=" + urlEncodedMessage + "&To=" + String(to_number) + "&From=" + String(from_number);
  
  int httpCode = http.POST(postData);
  
  if (httpCode > 0) {
    String payload = http.getString();
    Serial.println("Call Response: " + payload);
  } else {
    Serial.println("Error on Call HTTP request: " + String(httpCode));
  }

  http.end();
}

void uploadToThingSpeak(float averageDistance, float distance1, float distance2, bool gateStatus, bool rainStatus) {
  // Update the fields with the data
  ThingSpeak.setField(1, averageDistance);
  ThingSpeak.setField(2, distance1);
  ThingSpeak.setField(3, distance2);
  ThingSpeak.setField(4, gateStatus ? 1 : 0);  // Use numerical values
  ThingSpeak.setField(5, rainStatus ? 1 : 0);  // Use numerical values

  // Write to ThingSpeak
  int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);

  if (x == 200) {
    Serial.println("Data uploaded to ThingSpeak successfully!");
  } else {
    Serial.println("Error uploading data to ThingSpeak: " + String(x));
  }
}
